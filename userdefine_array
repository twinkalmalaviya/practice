#include <iostream>
//#include <initializer_list>
//#include <array>
using namespace std;

template<class T,size_t N > 
struct array
{
/*member elements of array */
    	T elems[N];
        size_t array_size{N};
        
/*member methods of array */
        size_t size() {
            return array_size;
        }
        void display(){
            cout << "["<< " ";
            for (size_t i = 0; i < array_size; i++) 
            cout << elems[i] << " ";
            cout << "]"<< endl;
        }
/*Operations of array */
        T &operator[](size_t position) {
            if(position<array_size)
                return elems[position];
            else
                cout << "Out of array range"<< endl;
            return elems[0];
        }
        template<size_t N1>
        void operator=( array<T, N1> input) {
            
            for (size_t i = 0; i < array_size; i++)
                if(i<N1)
                    elems[i]=input[i];
                else
                    break;
        }

//        array() = default;       
//        array(T int_value) {
//            for(auto &input_v:elems)
//            input_v=int_value;
//            cout << "T int_value Constructor\n";
//        }
};

template<typename T1,size_t N2,size_t N3>
array<T1,(N2+N3)> operator+( array<T1, N2> &lhs, array<T1, N3> &rhs) {

    array<T1, (N2+N3)> Temp;
    size_t i,j;

    for (i = 0; i < lhs.size(); i++)
    Temp[i]=lhs[i];
    for (j=0; j < rhs.size();j++, i++)
    Temp[i]=rhs[j];

    return Temp;
}

int main()
{
    array<int, 4> arr1{0};
    array<int, 5> arr2 = {6, 7, 8, 9, 10};
    array<int, 9> arr3{0};
    
    arr3 = arr1;
    arr3 = arr1 + arr2; // arr3 = {1,2,3,4,5,6,7,8,9,10}

    arr1.display();
    arr2.display();
    arr3.display();
    return 0;
}
