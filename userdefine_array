#include <iostream>
#include <initializer_list>
//#include <array>
using namespace std;

template <typename T, int N >
struct array { 
public:
    int array_size{N};
	T elems[N];
public:
array() noexcept = default;
array(T int_value){
    for(auto &input_v:elems)
        input_v=int_value;
         cout << "T int_value Constructor\n";
    }

array(initializer_list<int> list1)
{

initializer_list<int>::iterator it = list1.begin();
for(auto &input_v:elems)
{
    input_v=*it++;

}
    cout << "Initializer_list<int>Constructor\n";
}
    T &operator[](int position)
    {
        return elems[position];
    }
    void  operator=( array<T, N> input)
    {

        array_size = N;
        for(int i=0;i<array_size;i++)
            elems[i]=input[i];
    cout << "operator=\n";
    }

    int size()
    {
        return array_size;
    }


};

int main()
{
    array<int, 5> arr1 = {1, 2, 3, 4, 5};
    arr1[0] = 0;
    cout << arr1[0] << endl;

    array<int, 5> arr2 = {6, 7, 8, 9, 10};

    array<int, 10> arr3{100};

 //   arr3 = arr1 + arr2; // arr3 = {1,2,3,4,5,6,7,8,9,10}
    for (int i = 0; i < arr3.size(); i++)
    {
        cout << arr3[i] << " ";
    }

    return 0;
}
